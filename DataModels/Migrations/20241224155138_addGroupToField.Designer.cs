// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.models;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(WGDBContext))]
    [Migration("20241224155138_addGroupToField")]
    partial class addGroupToField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Server.models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Category_id")
                        .HasColumnType("integer");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ListOfValue")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerType")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowInHUD")
                        .HasColumnType("boolean");

                    b.Property<bool>("SystemCol")
                        .HasColumnType("boolean");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Category_id");

                    b.ToTable("Field", (string)null);
                });

            modelBuilder.Entity("Server.models.GisObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("IdentityNo")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ObjectType_id")
                        .HasColumnType("integer");

                    b.Property<int?>("Parent_id")
                        .HasColumnType("integer");

                    b.Property<int>("Scenario_id")
                        .HasColumnType("integer");

                    b.Property<int?>("parent_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ObjectType_id");

                    b.HasIndex("Scenario_id");

                    b.HasIndex("parent_id");

                    b.ToTable("GisObject", (string)null);
                });

            modelBuilder.Entity("Server.models.GisObjectMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<int>("Field_id")
                        .HasColumnType("integer");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Object_id")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("gisObjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("gisObjectId");

                    b.ToTable("GisObjectMetaData", (string)null);
                });

            modelBuilder.Entity("Server.models.LocalizationString", b =>
                {
                    b.Property<int>("StrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StrId"));

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("StrKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StrValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StrId");

                    b.ToTable("LocalizationString", (string)null);
                });

            modelBuilder.Entity("Server.models.ObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category_id")
                        .HasColumnType("integer");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconBase64")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Model")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PicBase64")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Category_id");

                    b.ToTable("ObjectType", (string)null);
                });

            modelBuilder.Entity("Server.models.ObjectTypeMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Field_Id")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectType_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Field_Id");

                    b.HasIndex("ObjectType_Id");

                    b.ToTable("ObjectTypeMetaData", (string)null);
                });

            modelBuilder.Entity("Server.models.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Scenario");
                });

            modelBuilder.Entity("Server.models.ScenarioOfRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Scenario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Scenario_id");

                    b.ToTable("ScenarioOfRole");
                });

            modelBuilder.Entity("Server.models.Scene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<int>("GisObjectId")
                        .HasColumnType("integer");

                    b.Property<double>("Heading")
                        .HasColumnType("double precision");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Speed")
                        .HasColumnType("double precision");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GisObjectId");

                    b.ToTable("Scene");
                });

            modelBuilder.Entity("Server.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("permissions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Server.models.Field", b =>
                {
                    b.HasOne("Server.models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Server.models.GisObject", b =>
                {
                    b.HasOne("Server.models.ObjectType", "ObjectType")
                        .WithMany()
                        .HasForeignKey("ObjectType_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.models.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("Scenario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.models.GisObject", "Parent")
                        .WithMany()
                        .HasForeignKey("parent_id");

                    b.Navigation("ObjectType");

                    b.Navigation("Parent");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Server.models.GisObjectMetaData", b =>
                {
                    b.HasOne("Server.models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.models.GisObject", "gisObject")
                        .WithMany()
                        .HasForeignKey("gisObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("gisObject");
                });

            modelBuilder.Entity("Server.models.ObjectType", b =>
                {
                    b.HasOne("Server.models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Server.models.ObjectTypeMetaData", b =>
                {
                    b.HasOne("Server.models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("Field_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.models.ObjectType", "TypeOfObject")
                        .WithMany()
                        .HasForeignKey("ObjectType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("TypeOfObject");
                });

            modelBuilder.Entity("Server.models.ScenarioOfRole", b =>
                {
                    b.HasOne("Server.models.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("Scenario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Server.models.Scene", b =>
                {
                    b.HasOne("Server.models.GisObject", "GisObject")
                        .WithMany()
                        .HasForeignKey("GisObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GisObject");
                });
#pragma warning restore 612, 618
        }
    }
}
