{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ng-matero/extensions/fesm2022/mtxDrawer.mjs"],
  "sourcesContent": ["import { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, ViewChild, InjectionToken, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { coerceCssPixelValue } from '@angular/cdk/coercion';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/overlay';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * Configuration used when opening a drawer.\n */\nfunction MtxDrawerContainer_ng_template_0_Template(rf, ctx) {}\nclass MtxDrawerConfig {\n  constructor() {\n    /** Data being injected into the child component. */\n    this.data = null;\n    /** Whether the drawer has a backdrop. */\n    this.hasBackdrop = true;\n    /** Whether the user can use escape or clicking outside to close the drawer. */\n    this.disableClose = false;\n    /** Aria label to assign to the drawer element. */\n    this.ariaLabel = null;\n    /**\n     * Whether the drawer should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    this.closeOnNavigation = true;\n    /**\n     * Where the drawer should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    this.autoFocus = 'first-tabbable';\n    /**\n     * Whether the drawer should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    this.restoreFocus = true;\n    /** Position of the drawer. */\n    this.position = 'right';\n  }\n}\n\n/** Animations used by the drawer. */\nconst mtxDrawerAnimations = {\n  /** Animation that shows and hides a drawer. */\n  drawerState: trigger('state', [state('void, hidden', style({\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), state('visible', style({\n    transform: 'none',\n    visibility: 'visible'\n  })), transition('visible => void, visible => hidden', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')), transition('void => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)'))])\n};\n\n/**\n * Internal component that wraps user-provided drawer content.\n * @docs-private\n */\nclass MtxDrawerContainer extends CdkDialogContainer {\n  get _drawerPosition() {\n    return `mtx-drawer-${this._config.position}`;\n  }\n  constructor(elementRef, focusTrapFactory, document, config, checker, ngZone, overlayRef, focusMonitor) {\n    super(elementRef, focusTrapFactory, document, config, checker, ngZone, overlayRef, focusMonitor);\n    /** The state of the drawer animations. */\n    this._animationState = 'void';\n    /** Emits whenever the state of the animation changes. */\n    this._animationStateChanged = new EventEmitter();\n    /** Whether the component has been destroyed. */\n    this._destroyed = false;\n  }\n  _contentAttached() {\n    // Delegate to the original dialog-container initialization (i.e. saving the\n    // previous element, setting up the focus trap and moving focus to the container).\n    super._contentAttached();\n    this.enter();\n  }\n  /** Begin animation of bottom sheet entrance into view. */\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.markForCheck();\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit() {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._destroyed = true;\n  }\n  _onAnimationDone(event) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n    this._animationStateChanged.emit(event);\n  }\n  _onAnimationStart(event) {\n    this._animationStateChanged.emit(event);\n  }\n  _captureInitialFocus() {}\n  /** @nocollapse */\n  static {\n    this.ɵfac = function MtxDrawerContainer_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MtxDrawerContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MtxDrawerConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i3.OverlayRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MtxDrawerContainer,\n      selectors: [[\"mtx-drawer-container\"]],\n      viewQuery: function MtxDrawerContainer_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n        }\n      },\n      hostAttrs: [\"tabindex\", \"-1\", 1, \"mtx-drawer-container\"],\n      hostVars: 7,\n      hostBindings: function MtxDrawerContainer_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵsyntheticHostListener(\"@state.start\", function MtxDrawerContainer_animation_state_start_HostBindingHandler($event) {\n            return ctx._onAnimationStart($event);\n          })(\"@state.done\", function MtxDrawerContainer_animation_state_done_HostBindingHandler($event) {\n            return ctx._onAnimationDone($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx._config.id);\n          i0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n          i0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-modal\", ctx._config.isModal)(\"aria-label\", ctx._config.ariaLabel);\n          i0.ɵɵclassMap(ctx._drawerPosition);\n        }\n      },\n      standalone: true,\n      features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n      decls: 1,\n      vars: 0,\n      consts: [[\"cdkPortalOutlet\", \"\"]],\n      template: function MtxDrawerContainer_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, MtxDrawerContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n        }\n      },\n      dependencies: [CdkPortalOutlet],\n      styles: [\".mtx-drawer-container{display:block;width:100%;padding:8px 16px;overflow:auto;outline:0;box-sizing:border-box;background-color:var(--mtx-drawer-container-background-color, var(--mat-app-surface));color:var(--mtx-drawer-container-text-color, var(--mat-app-on-surface-variant));box-shadow:var(--mtx-drawer-container-elevation-shadow)}.cdk-high-contrast-active .mtx-drawer-container{outline:1px solid}.mtx-drawer-right{transform:translate(100%);border-top-left-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large))}.mtx-drawer-left{transform:translate(-100%);border-top-right-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large))}.mtx-drawer-bottom{transform:translateY(100%);border-top-left-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large));border-top-right-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large))}.mtx-drawer-top{transform:translateY(-100%);border-bottom-left-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large))}\\n\"],\n      encapsulation: 2,\n      data: {\n        animation: [mtxDrawerAnimations.drawerState]\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MtxDrawerContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mtx-drawer-container',\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      animations: [mtxDrawerAnimations.drawerState],\n      host: {\n        'class': 'mtx-drawer-container',\n        '[class]': '_drawerPosition',\n        'tabindex': '-1',\n        '[id]': '_config.id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-modal]': '_config.isModal',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[@state]': '_animationState',\n        '(@state.start)': '_onAnimationStart($event)',\n        '(@state.done)': '_onAnimationDone($event)'\n      },\n      standalone: true,\n      imports: [CdkPortalOutlet],\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      styles: [\".mtx-drawer-container{display:block;width:100%;padding:8px 16px;overflow:auto;outline:0;box-sizing:border-box;background-color:var(--mtx-drawer-container-background-color, var(--mat-app-surface));color:var(--mtx-drawer-container-text-color, var(--mat-app-on-surface-variant));box-shadow:var(--mtx-drawer-container-elevation-shadow)}.cdk-high-contrast-active .mtx-drawer-container{outline:1px solid}.mtx-drawer-right{transform:translate(100%);border-top-left-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large))}.mtx-drawer-left{transform:translate(-100%);border-top-right-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large))}.mtx-drawer-bottom{transform:translateY(100%);border-top-left-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large));border-top-right-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large))}.mtx-drawer-top{transform:translateY(-100%);border-bottom-left-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mtx-drawer-container-shape, var(--mat-app-corner-large))}\\n\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i1.FocusTrapFactory\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: MtxDrawerConfig\n  }, {\n    type: i1.InteractivityChecker\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i3.OverlayRef\n  }, {\n    type: i1.FocusMonitor\n  }], {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Reference to a drawer dispatched from the drawer service.\n */\nclass MtxDrawerRef {\n  /** Instance of the component making up the content of the drawer. */\n  get instance() {\n    return this._ref.componentInstance;\n  }\n  /**\n   * `ComponentRef` of the component opened into the drawer. Will be\n   * null when the drawer is opened using a `TemplateRef`.\n   */\n  get componentRef() {\n    return this._ref.componentRef;\n  }\n  constructor(_ref, config, containerInstance) {\n    this._ref = _ref;\n    /** Subject for notifying the user that the drawer has been dismissed. */\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the drawer has opened and appeared. */\n    this._afterOpened = new Subject();\n    this.containerInstance = containerInstance;\n    this.disableClose = config.disableClose;\n    this.id = _ref.id;\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'visible'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1)).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._ref.close(this._result);\n    });\n    _ref.overlayRef.detachments().subscribe(() => {\n      this._ref.close(this._result);\n    });\n    merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))).subscribe(event => {\n      if (!this.disableClose && (event.type !== 'keydown' || !hasModifierKey(event))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n  /**\n   * Dismisses the drawer.\n   * @param result Data to be passed back to the drawer opener.\n   */\n  dismiss(result) {\n    if (this.containerInstance && !this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the drawer.\n      this.containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1)).subscribe(event => {\n        // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has fired.\n        this._closeFallbackTimeout = setTimeout(() => {\n          this._ref.close(this._result);\n        }, event.totalTime + 100);\n        this._ref.overlayRef.detachBackdrop();\n      });\n      this._result = result;\n      this.containerInstance.exit();\n      this.containerInstance = null;\n    }\n  }\n  /** Gets an observable that is notified when the drawer is finished closing. */\n  afterDismissed() {\n    return this._ref.closed;\n  }\n  /** Gets an observable that is notified when the drawer has opened and appeared. */\n  afterOpened() {\n    return this._afterOpened;\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick() {\n    return this._ref.backdropClick;\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents() {\n    return this._ref.keydownEvents;\n  }\n}\n\n/** Injection token that can be used to access the data that was passed in to a drawer. */\nconst MTX_DRAWER_DATA = new InjectionToken('MtxDrawerData');\n/** Injection token that can be used to specify default drawer options. */\nconst MTX_DRAWER_DEFAULT_OPTIONS = new InjectionToken('mtx-drawer-default-options');\n// Counter for unique drawer ids.\nlet uniqueId = 0;\n/**\n * Service to trigger Material Design bottom sheets.\n */\nclass MtxDrawer {\n  /** Keeps track of the currently-open dialogs. */\n  get openDrawers() {\n    return this._parentDrawer ? this._parentDrawer.openDrawers : this._openDrawersAtThisLevel;\n  }\n  /** Stream that emits when a drawer has been opened. */\n  get afterOpened() {\n    return this._parentDrawer ? this._parentDrawer.afterOpened : this._afterOpenedAtThisLevel;\n  }\n  _getAfterAllDismissed() {\n    const parent = this._parentDrawer;\n    return parent ? parent._getAfterAllDismissed() : this._afterAllDismissedAtThisLevel;\n  }\n  constructor(_overlay, injector, _parentDrawer, _defaultOptions) {\n    this._overlay = _overlay;\n    this._parentDrawer = _parentDrawer;\n    this._defaultOptions = _defaultOptions;\n    this._openDrawersAtThisLevel = [];\n    this._afterAllDismissedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    /**\n     * Stream that emits when all open drawer have finished closing.\n     * Will emit on subscribe if there are no open drawers to begin with.\n     */\n    this.afterAllDismissed = defer(() => this.openDrawers.length ? this._getAfterAllDismissed() : this._getAfterAllDismissed().pipe(startWith(undefined)));\n    this._dialog = injector.get(Dialog);\n  }\n  open(componentOrTemplateRef, config) {\n    let drawerRef;\n    const _config = {\n      ...(this._defaultOptions || new MtxDrawerConfig()),\n      ...config\n    };\n    _config.id = _config.id || `mtx-drawer-${uniqueId++}`;\n    _config.width = _config.position === 'left' || _config.position === 'right' ? coerceCssPixelValue(_config.width) : '100vw';\n    _config.height = _config.position === 'top' || _config.position === 'bottom' ? coerceCssPixelValue(_config.height) : '100vh';\n    this._dialog.open(componentOrTemplateRef, {\n      ..._config,\n      // Disable closing since we need to sync it up to the animation ourselves.\n      disableClose: true,\n      // Disable closing on detachments so that we can sync up the animation.\n      closeOnOverlayDetachments: false,\n      container: {\n        type: MtxDrawerContainer,\n        providers: () => [\n        // Provide our config as the CDK config as well since it has the same interface as the\n        // CDK one, but it contains the actual values passed in by the user for things like\n        // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n        {\n          provide: MtxDrawerConfig,\n          useValue: _config\n        }, {\n          provide: DialogConfig,\n          useValue: _config\n        }]\n      },\n      scrollStrategy: _config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global()[_config.position]('0'),\n      templateContext: () => ({\n        drawerRef\n      }),\n      providers: (cdkRef, _cdkConfig, container) => {\n        drawerRef = new MtxDrawerRef(cdkRef, _config, container);\n        return [{\n          provide: MtxDrawerRef,\n          useValue: drawerRef\n        }, {\n          provide: MTX_DRAWER_DATA,\n          useValue: _config.data\n        }];\n      }\n    });\n    this.openDrawers.push(drawerRef);\n    this.afterOpened.next(drawerRef);\n    drawerRef.afterDismissed().subscribe(() => {\n      const index = this.openDrawers.indexOf(drawerRef);\n      if (index > -1) {\n        this.openDrawers.splice(index, 1);\n        if (!this.openDrawers.length) {\n          this._getAfterAllDismissed().next();\n        }\n      }\n    });\n    return drawerRef;\n  }\n  /**\n   * Dismisses all of the currently-open drawers.\n   */\n  dismissAll() {\n    this._dismissDrawers(this.openDrawers);\n  }\n  /**\n   * Finds an open drawer by its id.\n   * @param id ID to use when looking up the drawer.\n   */\n  getDrawerById(id) {\n    return this.openDrawers.find(drawer => drawer.id === id);\n  }\n  ngOnDestroy() {\n    // Only dismiss the drawers at this level on destroy\n    // since the parent service may still be active.\n    this._dismissDrawers(this._openDrawersAtThisLevel);\n    this._afterAllDismissedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n  _dismissDrawers(drawers) {\n    let i = drawers.length;\n    while (i--) {\n      drawers[i].dismiss();\n    }\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function MtxDrawer_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MtxDrawer)(i0.ɵɵinject(i3.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(MtxDrawer, 12), i0.ɵɵinject(MTX_DRAWER_DEFAULT_OPTIONS, 8));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MtxDrawer,\n      factory: MtxDrawer.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MtxDrawer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i3.Overlay\n  }, {\n    type: i0.Injector\n  }, {\n    type: MtxDrawer,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: MtxDrawerConfig,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MTX_DRAWER_DEFAULT_OPTIONS]\n    }]\n  }], null);\n})();\nclass MtxDrawerModule {\n  /** @nocollapse */static {\n    this.ɵfac = function MtxDrawerModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MtxDrawerModule)();\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MtxDrawerModule,\n      imports: [DialogModule, PortalModule, MatCommonModule, MtxDrawerContainer],\n      exports: [MtxDrawerContainer, MatCommonModule]\n    });\n  }\n  /** @nocollapse */\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MtxDrawer],\n      imports: [DialogModule, PortalModule, MatCommonModule, MatCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MtxDrawerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [DialogModule, PortalModule, MatCommonModule, MtxDrawerContainer],\n      exports: [MtxDrawerContainer, MatCommonModule],\n      providers: [MtxDrawer]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MTX_DRAWER_DATA, MTX_DRAWER_DEFAULT_OPTIONS, MtxDrawer, MtxDrawerConfig, MtxDrawerContainer, MtxDrawerModule, MtxDrawerRef, mtxDrawerAnimations };\n"],
  "mappings": "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",
  "names": []
}
