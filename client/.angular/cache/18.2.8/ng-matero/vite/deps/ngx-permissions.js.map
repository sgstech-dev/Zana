{
  "version": 3,
  "sources": ["../../../../../../node_modules/ngx-permissions/fesm2022/ngx-permissions.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, EventEmitter, inject, ViewContainerRef, ChangeDetectorRef, TemplateRef, Directive, Input, Output, NgModule } from '@angular/core';\nimport { BehaviorSubject, of, from, merge, forkJoin } from 'rxjs';\nimport { map, switchMap, catchError, mergeAll, first, mergeMap, every, skip, take, tap } from 'rxjs/operators';\nimport * as i3 from '@angular/router';\nimport { RouterStateSnapshot } from '@angular/router';\nconst NgxPermissionsPredefinedStrategies = {\n  REMOVE: 'remove',\n  SHOW: 'show'\n};\nclass NgxPermissionsConfigurationStore {\n  constructor() {\n    this.strategiesSource = new BehaviorSubject({});\n    this.strategies$ = this.strategiesSource.asObservable();\n  }\n  static {\n    this.ɵfac = function NgxPermissionsConfigurationStore_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsConfigurationStore)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxPermissionsConfigurationStore,\n      factory: NgxPermissionsConfigurationStore.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsConfigurationStore, [{\n    type: Injectable\n  }], null, null);\n})();\nconst USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');\nclass NgxPermissionsConfigurationService {\n  constructor(isolate = false, configurationStore) {\n    this.isolate = isolate;\n    this.configurationStore = configurationStore;\n    this.strategiesSource = this.isolate ? new BehaviorSubject({}) : this.configurationStore.strategiesSource;\n    this.strategies$ = this.strategiesSource.asObservable();\n    this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;\n    this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;\n  }\n  setDefaultOnAuthorizedStrategy(name) {\n    if (this.isolate) {\n      this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n    } else {\n      this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n      this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;\n    }\n  }\n  setDefaultOnUnauthorizedStrategy(name) {\n    if (this.isolate) {\n      this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n    } else {\n      this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n      this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;\n    }\n  }\n  addPermissionStrategy(key, func) {\n    this.strategiesSource.value[key] = func;\n  }\n  getStrategy(key) {\n    return this.strategiesSource.value[key];\n  }\n  getAllStrategies() {\n    return this.strategiesSource.value;\n  }\n  getDefinedStrategy(name) {\n    if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {\n      return name;\n    } else {\n      throw new Error(`No ' ${name} ' strategy is found please define one`);\n    }\n  }\n  isPredefinedStrategy(strategy) {\n    return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;\n  }\n  static {\n    this.ɵfac = function NgxPermissionsConfigurationService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsConfigurationService)(i0.ɵɵinject(USE_CONFIGURATION_STORE), i0.ɵɵinject(NgxPermissionsConfigurationStore));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxPermissionsConfigurationService,\n      factory: NgxPermissionsConfigurationService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsConfigurationService, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [USE_CONFIGURATION_STORE]\n    }]\n  }, {\n    type: NgxPermissionsConfigurationStore\n  }], null);\n})();\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\nfunction isPlainObject(value) {\n  if (Object.prototype.toString.call(value) !== '[object Object]') {\n    return false;\n  } else {\n    const prototype = Object.getPrototypeOf(value);\n    return prototype === null || prototype === Object.prototype;\n  }\n}\nfunction isString(value) {\n  return !!value && typeof value === 'string';\n}\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\nfunction isPromise(promise) {\n  return Object.prototype.toString.call(promise) === '[object Promise]';\n}\nfunction notEmptyValue(value) {\n  if (Array.isArray(value)) {\n    return value.length > 0;\n  }\n  return !!value;\n}\nfunction transformStringToArray(value) {\n  if (isString(value)) {\n    return [value];\n  }\n  return value;\n}\nclass NgxPermissionsStore {\n  constructor() {\n    this.permissionsSource = new BehaviorSubject({});\n    this.permissions$ = this.permissionsSource.asObservable();\n  }\n  static {\n    this.ɵfac = function NgxPermissionsStore_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsStore)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxPermissionsStore,\n      factory: NgxPermissionsStore.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsStore, [{\n    type: Injectable\n  }], null, null);\n})();\nconst USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');\nclass NgxPermissionsService {\n  constructor(isolate = false, permissionsStore) {\n    this.isolate = isolate;\n    this.permissionsStore = permissionsStore;\n    this.permissionsSource = this.isolate ? new BehaviorSubject({}) : this.permissionsStore.permissionsSource;\n    this.permissions$ = this.permissionsSource.asObservable();\n  }\n  /**\n   * Remove all permissions from permissions source\n   */\n  flushPermissions() {\n    this.permissionsSource.next({});\n  }\n  hasPermission(permission) {\n    if (!permission || Array.isArray(permission) && permission.length === 0) {\n      return Promise.resolve(true);\n    }\n    permission = transformStringToArray(permission);\n    return this.hasArrayPermission(permission);\n  }\n  loadPermissions(permissions, validationFunction) {\n    const newPermissions = permissions.reduce((source, name) => this.reducePermission(source, name, validationFunction), {});\n    this.permissionsSource.next(newPermissions);\n  }\n  addPermission(permission, validationFunction) {\n    if (Array.isArray(permission)) {\n      const permissions = permission.reduce((source, name) => this.reducePermission(source, name, validationFunction), this.permissionsSource.value);\n      this.permissionsSource.next(permissions);\n    } else {\n      const permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);\n      this.permissionsSource.next(permissions);\n    }\n  }\n  removePermission(permissionName) {\n    const permissions = {\n      ...this.permissionsSource.value\n    };\n    delete permissions[permissionName];\n    this.permissionsSource.next(permissions);\n  }\n  getPermission(name) {\n    return this.permissionsSource.value[name];\n  }\n  getPermissions() {\n    return this.permissionsSource.value;\n  }\n  reducePermission(source, name, validationFunction) {\n    if (!!validationFunction && isFunction(validationFunction)) {\n      return {\n        ...source,\n        [name]: {\n          name,\n          validationFunction\n        }\n      };\n    }\n    return {\n      ...source,\n      [name]: {\n        name\n      }\n    };\n  }\n  hasArrayPermission(permissions) {\n    const promises = permissions.map(key => {\n      if (this.hasPermissionValidationFunction(key)) {\n        const validationFunction = this.permissionsSource.value[key].validationFunction;\n        const immutableValue = {\n          ...this.permissionsSource.value\n        };\n        return of(null).pipe(map(() => validationFunction(key, immutableValue)), switchMap(promise => isBoolean(promise) ? of(promise) : promise), catchError(() => of(false)));\n      }\n      // check for name of the permission if there is no validation function\n      return of(!!this.permissionsSource.value[key]);\n    });\n    return from(promises).pipe(mergeAll(), first(data => data !== false, false), map(data => data !== false)).toPromise().then(data => data);\n  }\n  hasPermissionValidationFunction(key) {\n    return !!this.permissionsSource.value[key] && !!this.permissionsSource.value[key].validationFunction && isFunction(this.permissionsSource.value[key].validationFunction);\n  }\n  static {\n    this.ɵfac = function NgxPermissionsService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsService)(i0.ɵɵinject(USE_PERMISSIONS_STORE), i0.ɵɵinject(NgxPermissionsStore));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxPermissionsService,\n      factory: NgxPermissionsService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsService, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [USE_PERMISSIONS_STORE]\n    }]\n  }, {\n    type: NgxPermissionsStore\n  }], null);\n})();\nclass NgxRolesStore {\n  constructor() {\n    this.rolesSource = new BehaviorSubject({});\n    this.roles$ = this.rolesSource.asObservable();\n  }\n}\nconst USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');\nclass NgxRolesService {\n  constructor(isolate = false, rolesStore, permissionsService) {\n    this.isolate = isolate;\n    this.rolesStore = rolesStore;\n    this.permissionsService = permissionsService;\n    this.rolesSource = this.isolate ? new BehaviorSubject({}) : this.rolesStore.rolesSource;\n    this.roles$ = this.rolesSource.asObservable();\n  }\n  addRole(name, validationFunction) {\n    const roles = {\n      ...this.rolesSource.value,\n      [name]: {\n        name,\n        validationFunction\n      }\n    };\n    this.rolesSource.next(roles);\n  }\n  addRoleWithPermissions(name, permissions) {\n    this.permissionsService.addPermission(permissions);\n    this.addRole(name, permissions);\n  }\n  addRoles(rolesObj) {\n    Object.keys(rolesObj).forEach((key, index) => {\n      this.addRole(key, rolesObj[key]);\n    });\n  }\n  addRolesWithPermissions(rolesObj) {\n    Object.keys(rolesObj).forEach((key, index) => {\n      this.addRoleWithPermissions(key, rolesObj[key]);\n    });\n  }\n  flushRoles() {\n    this.rolesSource.next({});\n  }\n  flushRolesAndPermissions() {\n    this.flushRoles();\n    this.permissionsService.flushPermissions();\n  }\n  removeRole(roleName) {\n    const roles = {\n      ...this.rolesSource.value\n    };\n    delete roles[roleName];\n    this.rolesSource.next(roles);\n  }\n  getRoles() {\n    return this.rolesSource.value;\n  }\n  getRole(name) {\n    return this.rolesSource.value[name];\n  }\n  hasOnlyRoles(names) {\n    const isNamesEmpty = !names || Array.isArray(names) && names.length === 0;\n    if (isNamesEmpty) {\n      return Promise.resolve(true);\n    }\n    names = transformStringToArray(names);\n    return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)]).then(([hasRoles, hasPermissions]) => {\n      return hasRoles || hasPermissions;\n    });\n  }\n  hasRoleKey(roleName) {\n    const promises = roleName.map(key => {\n      const hasValidationFunction = !!this.rolesSource.value[key] && !!this.rolesSource.value[key].validationFunction && isFunction(this.rolesSource.value[key].validationFunction);\n      if (hasValidationFunction && !isPromise(this.rolesSource.value[key].validationFunction)) {\n        const validationFunction = this.rolesSource.value[key].validationFunction;\n        const immutableValue = {\n          ...this.rolesSource.value\n        };\n        return of(null).pipe(map(() => validationFunction(key, immutableValue)), switchMap(promise => isBoolean(promise) ? of(promise) : promise), catchError(() => of(false)));\n      }\n      return of(false);\n    });\n    return from(promises).pipe(mergeAll(), first(data => data !== false, false), map(data => data !== false)).toPromise().then(data => data);\n  }\n  hasRolePermission(roles, roleNames) {\n    return from(roleNames).pipe(mergeMap(key => {\n      if (roles[key] && Array.isArray(roles[key].validationFunction)) {\n        return from(roles[key].validationFunction).pipe(mergeMap(permission => this.permissionsService.hasPermission(permission)), every(hasPermission => hasPermission === true));\n      }\n      return of(false);\n    }), first(hasPermission => hasPermission === true, false)).toPromise();\n  }\n  static {\n    this.ɵfac = function NgxRolesService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxRolesService)(i0.ɵɵinject(USE_ROLES_STORE), i0.ɵɵinject(NgxRolesStore), i0.ɵɵinject(NgxPermissionsService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxRolesService,\n      factory: NgxRolesService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxRolesService, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [USE_ROLES_STORE]\n    }]\n  }, {\n    type: NgxRolesStore\n  }, {\n    type: NgxPermissionsService\n  }], null);\n})();\nclass NgxPermissionsDirective {\n  constructor() {\n    this.permissionsAuthorized = new EventEmitter();\n    this.permissionsUnauthorized = new EventEmitter();\n    // skip first run cause merge will fire twice\n    this.firstMergeUnusedRun = 1;\n    this.permissionsService = inject(NgxPermissionsService);\n    this.configurationService = inject(NgxPermissionsConfigurationService);\n    this.rolesService = inject(NgxRolesService);\n    this.viewContainer = inject(ViewContainerRef);\n    this.changeDetector = inject(ChangeDetectorRef);\n    this.templateRef = inject(TemplateRef);\n  }\n  ngOnInit() {\n    this.viewContainer.clear();\n    this.initPermissionSubscription = this.validateExceptOnlyPermissions();\n  }\n  ngOnChanges(changes) {\n    const onlyChanges = changes['ngxPermissionsOnly'];\n    const exceptChanges = changes['ngxPermissionsExcept'];\n    if (onlyChanges || exceptChanges) {\n      // Due to bug when you pass empty array\n      if (onlyChanges && onlyChanges.firstChange) {\n        return;\n      }\n      if (exceptChanges && exceptChanges.firstChange) {\n        return;\n      }\n      merge(this.permissionsService.permissions$, this.rolesService.roles$).pipe(skip(this.firstMergeUnusedRun), take(1)).subscribe(() => {\n        if (notEmptyValue(this.ngxPermissionsExcept)) {\n          this.validateExceptAndOnlyPermissions();\n          return;\n        }\n        if (notEmptyValue(this.ngxPermissionsOnly)) {\n          this.validateOnlyPermissions();\n          return;\n        }\n        this.handleAuthorisedPermission(this.getAuthorisedTemplates());\n      });\n    }\n  }\n  ngOnDestroy() {\n    if (this.initPermissionSubscription) {\n      this.initPermissionSubscription.unsubscribe();\n    }\n  }\n  validateExceptOnlyPermissions() {\n    return merge(this.permissionsService.permissions$, this.rolesService.roles$).pipe(skip(this.firstMergeUnusedRun)).subscribe(() => {\n      if (notEmptyValue(this.ngxPermissionsExcept)) {\n        this.validateExceptAndOnlyPermissions();\n        return;\n      }\n      if (notEmptyValue(this.ngxPermissionsOnly)) {\n        this.validateOnlyPermissions();\n        return;\n      }\n      this.handleAuthorisedPermission(this.getAuthorisedTemplates());\n    });\n  }\n  validateExceptAndOnlyPermissions() {\n    Promise.all([this.permissionsService.hasPermission(this.ngxPermissionsExcept), this.rolesService.hasOnlyRoles(this.ngxPermissionsExcept)]).then(([hasPermission, hasRole]) => {\n      if (hasPermission || hasRole) {\n        this.handleUnauthorisedPermission(this.ngxPermissionsExceptElse || this.ngxPermissionsElse);\n        return;\n      }\n      if (!!this.ngxPermissionsOnly) {\n        throw false;\n      }\n      this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\n    }).catch(() => {\n      if (!!this.ngxPermissionsOnly) {\n        this.validateOnlyPermissions();\n      } else {\n        this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\n      }\n    });\n  }\n  validateOnlyPermissions() {\n    Promise.all([this.permissionsService.hasPermission(this.ngxPermissionsOnly), this.rolesService.hasOnlyRoles(this.ngxPermissionsOnly)]).then(([hasPermissions, hasRoles]) => {\n      if (hasPermissions || hasRoles) {\n        this.handleAuthorisedPermission(this.ngxPermissionsOnlyThen || this.ngxPermissionsThen || this.templateRef);\n      } else {\n        this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\n      }\n    }).catch(() => {\n      this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\n    });\n  }\n  handleUnauthorisedPermission(template) {\n    if (isBoolean(this.currentAuthorizedState) && !this.currentAuthorizedState) {\n      return;\n    }\n    this.currentAuthorizedState = false;\n    this.permissionsUnauthorized.emit();\n    if (this.getUnAuthorizedStrategyInput()) {\n      this.applyStrategyAccordingToStrategyType(this.getUnAuthorizedStrategyInput());\n      return;\n    }\n    if (this.configurationService.onUnAuthorisedDefaultStrategy && !this.elseBlockDefined()) {\n      this.applyStrategy(this.configurationService.onUnAuthorisedDefaultStrategy);\n    } else {\n      this.showTemplateBlockInView(template);\n    }\n  }\n  handleAuthorisedPermission(template) {\n    if (isBoolean(this.currentAuthorizedState) && this.currentAuthorizedState) {\n      return;\n    }\n    this.currentAuthorizedState = true;\n    this.permissionsAuthorized.emit();\n    if (this.getAuthorizedStrategyInput()) {\n      this.applyStrategyAccordingToStrategyType(this.getAuthorizedStrategyInput());\n      return;\n    }\n    if (this.configurationService.onAuthorisedDefaultStrategy && !this.thenBlockDefined()) {\n      this.applyStrategy(this.configurationService.onAuthorisedDefaultStrategy);\n    } else {\n      this.showTemplateBlockInView(template);\n    }\n  }\n  applyStrategyAccordingToStrategyType(strategy) {\n    if (isString(strategy)) {\n      this.applyStrategy(strategy);\n      return;\n    }\n    if (isFunction(strategy)) {\n      this.showTemplateBlockInView(this.templateRef);\n      strategy(this.templateRef);\n      return;\n    }\n  }\n  showTemplateBlockInView(template) {\n    this.viewContainer.clear();\n    if (!template) {\n      return;\n    }\n    this.viewContainer.createEmbeddedView(template);\n    this.changeDetector.markForCheck();\n  }\n  getAuthorisedTemplates() {\n    return this.ngxPermissionsOnlyThen || this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef;\n  }\n  elseBlockDefined() {\n    return !!this.ngxPermissionsExceptElse || !!this.ngxPermissionsElse;\n  }\n  thenBlockDefined() {\n    return !!this.ngxPermissionsExceptThen || !!this.ngxPermissionsThen;\n  }\n  getAuthorizedStrategyInput() {\n    return this.ngxPermissionsOnlyAuthorisedStrategy || this.ngxPermissionsExceptAuthorisedStrategy || this.ngxPermissionsAuthorisedStrategy;\n  }\n  getUnAuthorizedStrategyInput() {\n    return this.ngxPermissionsOnlyUnauthorisedStrategy || this.ngxPermissionsExceptUnauthorisedStrategy || this.ngxPermissionsUnauthorisedStrategy;\n  }\n  applyStrategy(name) {\n    if (name === NgxPermissionsPredefinedStrategies.SHOW) {\n      this.showTemplateBlockInView(this.templateRef);\n      return;\n    }\n    if (name === NgxPermissionsPredefinedStrategies.REMOVE) {\n      this.viewContainer.clear();\n      return;\n    }\n    const strategy = this.configurationService.getStrategy(name);\n    this.showTemplateBlockInView(this.templateRef);\n    strategy(this.templateRef);\n  }\n  static {\n    this.ɵfac = function NgxPermissionsDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgxPermissionsDirective,\n      selectors: [[\"\", \"ngxPermissionsOnly\", \"\"], [\"\", \"ngxPermissionsExcept\", \"\"]],\n      inputs: {\n        ngxPermissionsOnly: \"ngxPermissionsOnly\",\n        ngxPermissionsOnlyThen: \"ngxPermissionsOnlyThen\",\n        ngxPermissionsOnlyElse: \"ngxPermissionsOnlyElse\",\n        ngxPermissionsExcept: \"ngxPermissionsExcept\",\n        ngxPermissionsExceptElse: \"ngxPermissionsExceptElse\",\n        ngxPermissionsExceptThen: \"ngxPermissionsExceptThen\",\n        ngxPermissionsThen: \"ngxPermissionsThen\",\n        ngxPermissionsElse: \"ngxPermissionsElse\",\n        ngxPermissionsOnlyAuthorisedStrategy: \"ngxPermissionsOnlyAuthorisedStrategy\",\n        ngxPermissionsOnlyUnauthorisedStrategy: \"ngxPermissionsOnlyUnauthorisedStrategy\",\n        ngxPermissionsExceptUnauthorisedStrategy: \"ngxPermissionsExceptUnauthorisedStrategy\",\n        ngxPermissionsExceptAuthorisedStrategy: \"ngxPermissionsExceptAuthorisedStrategy\",\n        ngxPermissionsUnauthorisedStrategy: \"ngxPermissionsUnauthorisedStrategy\",\n        ngxPermissionsAuthorisedStrategy: \"ngxPermissionsAuthorisedStrategy\"\n      },\n      outputs: {\n        permissionsAuthorized: \"permissionsAuthorized\",\n        permissionsUnauthorized: \"permissionsUnauthorized\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\n    }]\n  }], null, {\n    ngxPermissionsOnly: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyThen: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyElse: [{\n      type: Input\n    }],\n    ngxPermissionsExcept: [{\n      type: Input\n    }],\n    ngxPermissionsExceptElse: [{\n      type: Input\n    }],\n    ngxPermissionsExceptThen: [{\n      type: Input\n    }],\n    ngxPermissionsThen: [{\n      type: Input\n    }],\n    ngxPermissionsElse: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyAuthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyUnauthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsExceptUnauthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsExceptAuthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsUnauthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsAuthorisedStrategy: [{\n      type: Input\n    }],\n    permissionsAuthorized: [{\n      type: Output\n    }],\n    permissionsUnauthorized: [{\n      type: Output\n    }]\n  });\n})();\nconst DEFAULT_REDIRECT_KEY = 'default';\nconst ngxPermissionsGuard = (route, state) => {\n  const permissionsGuard = inject(NgxPermissionsGuard);\n  if (state instanceof RouterStateSnapshot) {\n    return permissionsGuard.hasPermissions(route, state);\n  }\n  return permissionsGuard.hasPermissions(route);\n};\n/**\n * @deprecated Use {@link ngxPermissionsGuard} instead\n */\nclass NgxPermissionsGuard {\n  constructor(permissionsService, rolesService, router) {\n    this.permissionsService = permissionsService;\n    this.rolesService = rolesService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.hasPermissions(route, state);\n  }\n  canActivateChild(childRoute, state) {\n    return this.hasPermissions(childRoute, state);\n  }\n  canLoad(route) {\n    return this.hasPermissions(route);\n  }\n  canMatch(route) {\n    return this.hasPermissions(route);\n  }\n  hasPermissions(route, state) {\n    const routeDataPermissions = !!route && route.data ? route.data['permissions'] : {};\n    const permissions = this.transformPermission(routeDataPermissions, route, state);\n    if (this.isParameterAvailable(permissions.except)) {\n      return this.passingExceptPermissionsValidation(permissions, route, state);\n    }\n    if (this.isParameterAvailable(permissions.only)) {\n      return this.passingOnlyPermissionsValidation(permissions, route, state);\n    }\n    return true;\n  }\n  transformPermission(permissions, route, state) {\n    const only = isFunction(permissions.only) ? permissions.only(route, state) : transformStringToArray(permissions.only);\n    const except = isFunction(permissions.except) ? permissions.except(route, state) : transformStringToArray(permissions.except);\n    const redirectTo = permissions.redirectTo;\n    return {\n      only,\n      except,\n      redirectTo\n    };\n  }\n  isParameterAvailable(permission) {\n    return !!permission && permission.length > 0;\n  }\n  passingExceptPermissionsValidation(permissions, route, state) {\n    if (!!permissions.redirectTo && (isFunction(permissions.redirectTo) || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))) {\n      let failedPermission = '';\n      return from(permissions.except).pipe(mergeMap(permissionsExcept => {\n        return forkJoin([this.permissionsService.hasPermission(permissionsExcept), this.rolesService.hasOnlyRoles(permissionsExcept)]).pipe(tap(hasPermissions => {\n          const dontHavePermissions = hasPermissions.every(hasPermission => hasPermission === false);\n          if (!dontHavePermissions) {\n            failedPermission = permissionsExcept;\n          }\n        }));\n      }), first(hasPermissions => hasPermissions.some(hasPermission => hasPermission === true), false), mergeMap(isAllFalse => {\n        if (!!failedPermission) {\n          this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\n          return of(false);\n        }\n        if (!isAllFalse && permissions.only) {\n          return this.onlyRedirectCheck(permissions, route, state);\n        }\n        return of(!isAllFalse);\n      })).toPromise();\n    }\n    return Promise.all([this.permissionsService.hasPermission(permissions.except), this.rolesService.hasOnlyRoles(permissions.except)]).then(([hasPermission, hasRoles]) => {\n      if (hasPermission || hasRoles) {\n        if (permissions.redirectTo) {\n          this.redirectToAnotherRoute(permissions.redirectTo, route, state);\n        }\n        return false;\n      }\n      if (permissions.only) {\n        return this.checkOnlyPermissions(permissions, route, state);\n      }\n      return true;\n    });\n  }\n  redirectToAnotherRoute(permissionRedirectTo, route, state, failedPermissionName) {\n    const redirectTo = isFunction(permissionRedirectTo) ? permissionRedirectTo(failedPermissionName, route, state) : permissionRedirectTo;\n    if (this.isRedirectionWithParameters(redirectTo)) {\n      redirectTo.navigationCommands = this.transformNavigationCommands(redirectTo.navigationCommands, route, state);\n      redirectTo.navigationExtras = this.transformNavigationExtras(redirectTo.navigationExtras, route, state);\n      this.router.navigate(redirectTo.navigationCommands, redirectTo.navigationExtras);\n      return;\n    }\n    if (Array.isArray(redirectTo)) {\n      this.router.navigate(redirectTo);\n    } else {\n      this.router.navigate([redirectTo]);\n    }\n  }\n  isRedirectionWithParameters(object) {\n    return isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras);\n  }\n  transformNavigationCommands(navigationCommands, route, state) {\n    return isFunction(navigationCommands) ? navigationCommands(route, state) : navigationCommands;\n  }\n  transformNavigationExtras(navigationExtras, route, state) {\n    return isFunction(navigationExtras) ? navigationExtras(route, state) : navigationExtras;\n  }\n  onlyRedirectCheck(permissions, route, state) {\n    let failedPermission = '';\n    return from(permissions.only).pipe(mergeMap(permissionsOnly => {\n      return forkJoin([this.permissionsService.hasPermission(permissionsOnly), this.rolesService.hasOnlyRoles(permissionsOnly)]).pipe(tap(hasPermissions => {\n        const failed = hasPermissions.every(hasPermission => hasPermission === false);\n        if (failed) {\n          failedPermission = permissionsOnly;\n        }\n      }));\n    }), first(hasPermissions => {\n      if (isFunction(permissions.redirectTo)) {\n        return hasPermissions.some(hasPermission => hasPermission === true);\n      }\n      return hasPermissions.every(hasPermission => hasPermission === false);\n    }, false), mergeMap(pass => {\n      if (isFunction(permissions.redirectTo)) {\n        if (pass) {\n          return of(true);\n        } else {\n          this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\n          return of(false);\n        }\n      } else {\n        if (!!failedPermission) {\n          this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\n        }\n        return of(!pass);\n      }\n    })).toPromise();\n  }\n  handleRedirectOfFailedPermission(permissions, failedPermission, route, state) {\n    if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {\n      this.redirectToAnotherRoute(permissions.redirectTo[failedPermission], route, state, failedPermission);\n    } else {\n      if (isFunction(permissions.redirectTo)) {\n        this.redirectToAnotherRoute(permissions.redirectTo, route, state, failedPermission);\n      } else {\n        this.redirectToAnotherRoute(permissions.redirectTo[DEFAULT_REDIRECT_KEY], route, state, failedPermission);\n      }\n    }\n  }\n  isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission) {\n    return !!permissions.redirectTo && permissions.redirectTo[failedPermission];\n  }\n  checkOnlyPermissions(purePermissions, route, state) {\n    const permissions = {\n      ...purePermissions\n    };\n    return Promise.all([this.permissionsService.hasPermission(permissions.only), this.rolesService.hasOnlyRoles(permissions.only)]).then(([hasPermission, hasRole]) => {\n      if (hasPermission || hasRole) {\n        return true;\n      }\n      if (permissions.redirectTo) {\n        this.redirectToAnotherRoute(permissions.redirectTo, route, state);\n      }\n      return false;\n    });\n  }\n  passingOnlyPermissionsValidation(permissions, route, state) {\n    if (isFunction(permissions.redirectTo) || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo)) {\n      return this.onlyRedirectCheck(permissions, route, state);\n    }\n    return this.checkOnlyPermissions(permissions, route, state);\n  }\n  static {\n    this.ɵfac = function NgxPermissionsGuard_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsGuard)(i0.ɵɵinject(NgxPermissionsService), i0.ɵɵinject(NgxRolesService), i0.ɵɵinject(i3.Router));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxPermissionsGuard,\n      factory: NgxPermissionsGuard.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsGuard, [{\n    type: Injectable\n  }], () => [{\n    type: NgxPermissionsService\n  }, {\n    type: NgxRolesService\n  }, {\n    type: i3.Router\n  }], null);\n})();\nclass NgxPermissionsAllowStubDirective {\n  constructor() {\n    this.permissionsAuthorized = new EventEmitter();\n    this.permissionsUnauthorized = new EventEmitter();\n    this.viewContainer = inject(ViewContainerRef);\n    this.templateRef = inject(TemplateRef);\n  }\n  ngOnInit() {\n    this.viewContainer.clear();\n    this.viewContainer.createEmbeddedView(this.getAuthorizedTemplate());\n    this.permissionsAuthorized.emit();\n  }\n  getAuthorizedTemplate() {\n    return this.ngxPermissionsOnlyThen || this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef;\n  }\n  static {\n    this.ɵfac = function NgxPermissionsAllowStubDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsAllowStubDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgxPermissionsAllowStubDirective,\n      selectors: [[\"\", \"ngxPermissionsOnly\", \"\"], [\"\", \"ngxPermissionsExcept\", \"\"]],\n      inputs: {\n        ngxPermissionsOnly: \"ngxPermissionsOnly\",\n        ngxPermissionsOnlyThen: \"ngxPermissionsOnlyThen\",\n        ngxPermissionsOnlyElse: \"ngxPermissionsOnlyElse\",\n        ngxPermissionsExcept: \"ngxPermissionsExcept\",\n        ngxPermissionsExceptElse: \"ngxPermissionsExceptElse\",\n        ngxPermissionsExceptThen: \"ngxPermissionsExceptThen\",\n        ngxPermissionsThen: \"ngxPermissionsThen\",\n        ngxPermissionsElse: \"ngxPermissionsElse\",\n        ngxPermissionsOnlyAuthorisedStrategy: \"ngxPermissionsOnlyAuthorisedStrategy\",\n        ngxPermissionsOnlyUnauthorisedStrategy: \"ngxPermissionsOnlyUnauthorisedStrategy\",\n        ngxPermissionsExceptUnauthorisedStrategy: \"ngxPermissionsExceptUnauthorisedStrategy\",\n        ngxPermissionsExceptAuthorisedStrategy: \"ngxPermissionsExceptAuthorisedStrategy\",\n        ngxPermissionsUnauthorisedStrategy: \"ngxPermissionsUnauthorisedStrategy\",\n        ngxPermissionsAuthorisedStrategy: \"ngxPermissionsAuthorisedStrategy\"\n      },\n      outputs: {\n        permissionsAuthorized: \"permissionsAuthorized\",\n        permissionsUnauthorized: \"permissionsUnauthorized\"\n      },\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsAllowStubDirective, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\n    }]\n  }], null, {\n    ngxPermissionsOnly: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyThen: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyElse: [{\n      type: Input\n    }],\n    ngxPermissionsExcept: [{\n      type: Input\n    }],\n    ngxPermissionsExceptElse: [{\n      type: Input\n    }],\n    ngxPermissionsExceptThen: [{\n      type: Input\n    }],\n    ngxPermissionsThen: [{\n      type: Input\n    }],\n    ngxPermissionsElse: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyAuthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyUnauthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsExceptUnauthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsExceptAuthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsUnauthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsAuthorisedStrategy: [{\n      type: Input\n    }],\n    permissionsAuthorized: [{\n      type: Output\n    }],\n    permissionsUnauthorized: [{\n      type: Output\n    }]\n  });\n})();\nclass NgxPermissionsRestrictStubDirective {\n  constructor() {\n    this.permissionsAuthorized = new EventEmitter();\n    this.permissionsUnauthorized = new EventEmitter();\n    this.viewContainer = inject(ViewContainerRef);\n  }\n  ngOnInit() {\n    this.viewContainer.clear();\n    if (this.getUnAuthorizedTemplate()) {\n      this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());\n    }\n    this.permissionsUnauthorized.emit();\n  }\n  getUnAuthorizedTemplate() {\n    return this.ngxPermissionsOnlyElse || this.ngxPermissionsExceptElse || this.ngxPermissionsElse;\n  }\n  static {\n    this.ɵfac = function NgxPermissionsRestrictStubDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsRestrictStubDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgxPermissionsRestrictStubDirective,\n      selectors: [[\"\", \"ngxPermissionsOnly\", \"\"], [\"\", \"ngxPermissionsExcept\", \"\"]],\n      inputs: {\n        ngxPermissionsOnly: \"ngxPermissionsOnly\",\n        ngxPermissionsOnlyThen: \"ngxPermissionsOnlyThen\",\n        ngxPermissionsOnlyElse: \"ngxPermissionsOnlyElse\",\n        ngxPermissionsExcept: \"ngxPermissionsExcept\",\n        ngxPermissionsExceptElse: \"ngxPermissionsExceptElse\",\n        ngxPermissionsExceptThen: \"ngxPermissionsExceptThen\",\n        ngxPermissionsThen: \"ngxPermissionsThen\",\n        ngxPermissionsElse: \"ngxPermissionsElse\",\n        ngxPermissionsOnlyAuthorisedStrategy: \"ngxPermissionsOnlyAuthorisedStrategy\",\n        ngxPermissionsOnlyUnauthorisedStrategy: \"ngxPermissionsOnlyUnauthorisedStrategy\",\n        ngxPermissionsExceptUnauthorisedStrategy: \"ngxPermissionsExceptUnauthorisedStrategy\",\n        ngxPermissionsExceptAuthorisedStrategy: \"ngxPermissionsExceptAuthorisedStrategy\",\n        ngxPermissionsUnauthorisedStrategy: \"ngxPermissionsUnauthorisedStrategy\",\n        ngxPermissionsAuthorisedStrategy: \"ngxPermissionsAuthorisedStrategy\"\n      },\n      outputs: {\n        permissionsAuthorized: \"permissionsAuthorized\",\n        permissionsUnauthorized: \"permissionsUnauthorized\"\n      },\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsRestrictStubDirective, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\n    }]\n  }], null, {\n    ngxPermissionsOnly: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyThen: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyElse: [{\n      type: Input\n    }],\n    ngxPermissionsExcept: [{\n      type: Input\n    }],\n    ngxPermissionsExceptElse: [{\n      type: Input\n    }],\n    ngxPermissionsExceptThen: [{\n      type: Input\n    }],\n    ngxPermissionsThen: [{\n      type: Input\n    }],\n    ngxPermissionsElse: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyAuthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsOnlyUnauthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsExceptUnauthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsExceptAuthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsUnauthorisedStrategy: [{\n      type: Input\n    }],\n    ngxPermissionsAuthorisedStrategy: [{\n      type: Input\n    }],\n    permissionsAuthorized: [{\n      type: Output\n    }],\n    permissionsUnauthorized: [{\n      type: Output\n    }]\n  });\n})();\nclass NgxPermissionsModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: NgxPermissionsModule,\n      providers: [NgxPermissionsStore, NgxRolesStore, NgxPermissionsConfigurationStore, NgxPermissionsService, NgxPermissionsGuard, NgxRolesService, NgxPermissionsConfigurationService, {\n        provide: USE_PERMISSIONS_STORE,\n        useValue: config.permissionsIsolate\n      }, {\n        provide: USE_ROLES_STORE,\n        useValue: config.rolesIsolate\n      }, {\n        provide: USE_CONFIGURATION_STORE,\n        useValue: config.configurationIsolate\n      }]\n    };\n  }\n  static forChild(config = {}) {\n    return {\n      ngModule: NgxPermissionsModule,\n      providers: [{\n        provide: USE_PERMISSIONS_STORE,\n        useValue: config.permissionsIsolate\n      }, {\n        provide: USE_ROLES_STORE,\n        useValue: config.rolesIsolate\n      }, {\n        provide: USE_CONFIGURATION_STORE,\n        useValue: config.configurationIsolate\n      }, NgxPermissionsConfigurationService, NgxPermissionsService, NgxRolesService, NgxPermissionsGuard]\n    };\n  }\n  static {\n    this.ɵfac = function NgxPermissionsModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxPermissionsModule,\n      declarations: [NgxPermissionsDirective],\n      exports: [NgxPermissionsDirective]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [NgxPermissionsDirective],\n      exports: [NgxPermissionsDirective]\n    }]\n  }], null, null);\n})();\nclass NgxPermissionsAllowStubModule {\n  static {\n    this.ɵfac = function NgxPermissionsAllowStubModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsAllowStubModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxPermissionsAllowStubModule,\n      imports: [NgxPermissionsAllowStubDirective],\n      exports: [NgxPermissionsAllowStubDirective]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsAllowStubModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NgxPermissionsAllowStubDirective],\n      declarations: [],\n      exports: [NgxPermissionsAllowStubDirective]\n    }]\n  }], null, null);\n})();\nclass NgxPermissionsRestrictStubModule {\n  static {\n    this.ɵfac = function NgxPermissionsRestrictStubModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxPermissionsRestrictStubModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxPermissionsRestrictStubModule,\n      imports: [NgxPermissionsRestrictStubDirective],\n      exports: [NgxPermissionsRestrictStubDirective]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPermissionsRestrictStubModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NgxPermissionsRestrictStubDirective],\n      declarations: [],\n      exports: [NgxPermissionsRestrictStubDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-permissions\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_REDIRECT_KEY, NgxPermissionsAllowStubDirective, NgxPermissionsAllowStubModule, NgxPermissionsConfigurationService, NgxPermissionsConfigurationStore, NgxPermissionsDirective, NgxPermissionsGuard, NgxPermissionsModule, NgxPermissionsPredefinedStrategies, NgxPermissionsRestrictStubDirective, NgxPermissionsRestrictStubModule, NgxPermissionsService, NgxPermissionsStore, NgxRolesService, NgxRolesStore, USE_CONFIGURATION_STORE, USE_PERMISSIONS_STORE, USE_ROLES_STORE, ngxPermissionsGuard };\n"],
  "mappings": "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",
  "names": []
}
