{
  "version": 3,
  "sources": ["../../../../../../node_modules/screenfull/index.js"],
  "sourcesContent": ["/* eslint-disable promise/prefer-await-to-then */\n\nconst methodMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],\n// New WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],\n// Old WebKit\n['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'], ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'], ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];\nconst nativeAPI = (() => {\n  if (typeof document === 'undefined') {\n    return false;\n  }\n  const unprefixedMethods = methodMap[0];\n  const returnValue = {};\n  for (const methodList of methodMap) {\n    const exitFullscreenMethod = methodList?.[1];\n    if (exitFullscreenMethod in document) {\n      for (const [index, method] of methodList.entries()) {\n        returnValue[unprefixedMethods[index]] = method;\n      }\n      return returnValue;\n    }\n  }\n  return false;\n})();\nconst eventNameMap = {\n  change: nativeAPI.fullscreenchange,\n  error: nativeAPI.fullscreenerror\n};\n\n// eslint-disable-next-line import/no-mutable-exports\nlet screenfull = {\n  // eslint-disable-next-line default-param-last\n  request(element = document.documentElement, options) {\n    return new Promise((resolve, reject) => {\n      const onFullScreenEntered = () => {\n        screenfull.off('change', onFullScreenEntered);\n        resolve();\n      };\n      screenfull.on('change', onFullScreenEntered);\n      const returnPromise = element[nativeAPI.requestFullscreen](options);\n      if (returnPromise instanceof Promise) {\n        returnPromise.then(onFullScreenEntered).catch(reject);\n      }\n    });\n  },\n  exit() {\n    return new Promise((resolve, reject) => {\n      if (!screenfull.isFullscreen) {\n        resolve();\n        return;\n      }\n      const onFullScreenExit = () => {\n        screenfull.off('change', onFullScreenExit);\n        resolve();\n      };\n      screenfull.on('change', onFullScreenExit);\n      const returnPromise = document[nativeAPI.exitFullscreen]();\n      if (returnPromise instanceof Promise) {\n        returnPromise.then(onFullScreenExit).catch(reject);\n      }\n    });\n  },\n  toggle(element, options) {\n    return screenfull.isFullscreen ? screenfull.exit() : screenfull.request(element, options);\n  },\n  onchange(callback) {\n    screenfull.on('change', callback);\n  },\n  onerror(callback) {\n    screenfull.on('error', callback);\n  },\n  on(event, callback) {\n    const eventName = eventNameMap[event];\n    if (eventName) {\n      document.addEventListener(eventName, callback, false);\n    }\n  },\n  off(event, callback) {\n    const eventName = eventNameMap[event];\n    if (eventName) {\n      document.removeEventListener(eventName, callback, false);\n    }\n  },\n  raw: nativeAPI\n};\nObject.defineProperties(screenfull, {\n  isFullscreen: {\n    get: () => Boolean(document[nativeAPI.fullscreenElement])\n  },\n  element: {\n    enumerable: true,\n    get: () => document[nativeAPI.fullscreenElement] ?? undefined\n  },\n  isEnabled: {\n    enumerable: true,\n    // Coerce to boolean in case of old WebKit.\n    get: () => Boolean(document[nativeAPI.fullscreenEnabled])\n  }\n});\nif (!nativeAPI) {\n  screenfull = {\n    isEnabled: false\n  };\n}\nexport default screenfull;"],
  "mappings": ";;;AAEA,IAAM,YAAY;AAAA,EAAC,CAAC,qBAAqB,kBAAkB,qBAAqB,qBAAqB,oBAAoB,iBAAiB;AAAA;AAAA,EAE1I,CAAC,2BAA2B,wBAAwB,2BAA2B,2BAA2B,0BAA0B,uBAAuB;AAAA;AAAA,EAE3J,CAAC,2BAA2B,0BAA0B,kCAAkC,0BAA0B,0BAA0B,uBAAuB;AAAA,EAAG,CAAC,wBAAwB,uBAAuB,wBAAwB,wBAAwB,uBAAuB,oBAAoB;AAAA,EAAG,CAAC,uBAAuB,oBAAoB,uBAAuB,uBAAuB,sBAAsB,mBAAmB;AAAC;AACxb,IAAM,aAAa,MAAM;AACvB,MAAI,OAAO,aAAa,aAAa;AACnC,WAAO;AAAA,EACT;AACA,QAAM,oBAAoB,UAAU,CAAC;AACrC,QAAM,cAAc,CAAC;AACrB,aAAW,cAAc,WAAW;AAClC,UAAM,uBAAuB,aAAa,CAAC;AAC3C,QAAI,wBAAwB,UAAU;AACpC,iBAAW,CAAC,OAAO,MAAM,KAAK,WAAW,QAAQ,GAAG;AAClD,oBAAY,kBAAkB,KAAK,CAAC,IAAI;AAAA,MAC1C;AACA,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT,GAAG;AACH,IAAM,eAAe;AAAA,EACnB,QAAQ,UAAU;AAAA,EAClB,OAAO,UAAU;AACnB;AAGA,IAAI,aAAa;AAAA;AAAA,EAEf,QAAQ,UAAU,SAAS,iBAAiB,SAAS;AACnD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,sBAAsB,MAAM;AAChC,mBAAW,IAAI,UAAU,mBAAmB;AAC5C,gBAAQ;AAAA,MACV;AACA,iBAAW,GAAG,UAAU,mBAAmB;AAC3C,YAAM,gBAAgB,QAAQ,UAAU,iBAAiB,EAAE,OAAO;AAClE,UAAI,yBAAyB,SAAS;AACpC,sBAAc,KAAK,mBAAmB,EAAE,MAAM,MAAM;AAAA,MACtD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,OAAO;AACL,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI,CAAC,WAAW,cAAc;AAC5B,gBAAQ;AACR;AAAA,MACF;AACA,YAAM,mBAAmB,MAAM;AAC7B,mBAAW,IAAI,UAAU,gBAAgB;AACzC,gBAAQ;AAAA,MACV;AACA,iBAAW,GAAG,UAAU,gBAAgB;AACxC,YAAM,gBAAgB,SAAS,UAAU,cAAc,EAAE;AACzD,UAAI,yBAAyB,SAAS;AACpC,sBAAc,KAAK,gBAAgB,EAAE,MAAM,MAAM;AAAA,MACnD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,OAAO,SAAS,SAAS;AACvB,WAAO,WAAW,eAAe,WAAW,KAAK,IAAI,WAAW,QAAQ,SAAS,OAAO;AAAA,EAC1F;AAAA,EACA,SAAS,UAAU;AACjB,eAAW,GAAG,UAAU,QAAQ;AAAA,EAClC;AAAA,EACA,QAAQ,UAAU;AAChB,eAAW,GAAG,SAAS,QAAQ;AAAA,EACjC;AAAA,EACA,GAAG,OAAO,UAAU;AAClB,UAAM,YAAY,aAAa,KAAK;AACpC,QAAI,WAAW;AACb,eAAS,iBAAiB,WAAW,UAAU,KAAK;AAAA,IACtD;AAAA,EACF;AAAA,EACA,IAAI,OAAO,UAAU;AACnB,UAAM,YAAY,aAAa,KAAK;AACpC,QAAI,WAAW;AACb,eAAS,oBAAoB,WAAW,UAAU,KAAK;AAAA,IACzD;AAAA,EACF;AAAA,EACA,KAAK;AACP;AACA,OAAO,iBAAiB,YAAY;AAAA,EAClC,cAAc;AAAA,IACZ,KAAK,MAAM,QAAQ,SAAS,UAAU,iBAAiB,CAAC;AAAA,EAC1D;AAAA,EACA,SAAS;AAAA,IACP,YAAY;AAAA,IACZ,KAAK,MAAM,SAAS,UAAU,iBAAiB,KAAK;AAAA,EACtD;AAAA,EACA,WAAW;AAAA,IACT,YAAY;AAAA;AAAA,IAEZ,KAAK,MAAM,QAAQ,SAAS,UAAU,iBAAiB,CAAC;AAAA,EAC1D;AACF,CAAC;AACD,IAAI,CAAC,WAAW;AACd,eAAa;AAAA,IACX,WAAW;AAAA,EACb;AACF;AACA,IAAO,qBAAQ;",
  "names": []
}
